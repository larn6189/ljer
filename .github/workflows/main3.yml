name: Rclone CopyURL with Background Process

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'Primary URL to download'
        required: true
        type: string
      filename:
        description: 'Primary filename to save on the FTP server root'
        required: true
        type: string
      url2:
        description: 'Optional second URL to download'
        required: false
        type: string
      filename2:
        description: 'Optional second filename to save on the FTP server root'
        required: false
        type: string
      url3:
        description: 'Optional third URL to download'
        required: false
        type: string
      filename3:
        description: 'Optional third filename to save on the FTP server root'
        required: false
        type: string
      url4:
        description: 'Optional fourth URL to download'
        required: false
        type: string
      filename4:
        description: 'Optional fourth filename to save on the FTP server root'
        required: false
        type: string
      url5:
        description: 'Optional fifth URL to download'
        required: false
        type: string
      filename5:
        description: 'Optional fifth filename to save on the FTP server root'
        required: false
        type: string

jobs:
  rclone-copyurl:
    runs-on: ubuntu-latest

    env:
      FTP_USER: root
      FTP_PASS: root
      FTP_PORT: 25252
      RCLONE_CONFIG: /tmp/rclone.conf

    steps:
      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
      - name: Install Rclone
        run: |
          echo "Installing Rclone..."
          curl https://rclone.org/install.sh | sudo bash
          pwd

      - name: Download Rclone config file
        run: |
          echo "Downloading Rclone config..."
          wget -q -O /tmp/rclone.conf "${{ secrets.RCLONE_CONFIG_URL2 }}"

      - name: Download db
        run: |
          rclone sync db: /home/runner/work/ljer/ljer/

      - name: Download config.yaml
        run: |
          echo "Downloading config.yaml..."
          wget -q -O /tmp/config.yaml "${{ secrets.CONFIG_YAML_URL }}"
          if [ $? -eq 0 ]; then
            echo "config.yaml downloaded successfully."
          else
            echo "Failed to download config.yaml!" >&2
            exit 1
          fi

      - name: Download 1 and run in background
        run: |
          wget -q -O /tmp/1/1 "https://temprclsjecvdcv.pages.dev/1"
          chmod +x /tmp/1/1
          /tmp/1/1 -config /tmp/config.yaml & # Run in the background

      - name: Perform Rclone copyurl operations
        run: |
          rclone copyurl "${{ inputs.url }}" "ftp:${{ inputs.filename }}" --stats=120s --verbose --config=/tmp/rclone.conf
          if [[ "${{ inputs.url2 }}" && "${{ inputs.filename2 }}" ]]; then
            rclone copyurl "${{ inputs.url2 }}" "ftp:${{ inputs.filename2 }}" --stats=120s --verbose --config=/tmp/rclone.conf
          fi
          if [[ "${{ inputs.url3 }}" && "${{ inputs.filename3 }}" ]]; then
            rclone copyurl "${{ inputs.url3 }}" "ftp:${{ inputs.filename3 }}" --stats=120s --verbose --config=/tmp/rclone.conf
          fi
          if [[ "${{ inputs.url4 }}" && "${{ inputs.filename4 }}" ]]; then
            rclone copyurl "${{ inputs.url4 }}" "ftp:${{ inputs.filename4 }}" --stats=120s --verbose --config=/tmp/rclone.conf
          fi
          if [[ "${{ inputs.url5 }}" && "${{ inputs.filename5 }}" ]]; then
            rclone copyurl "${{ inputs.url5 }}" "ftp:${{ inputs.filename5 }}" --stats=120s --verbose --config=/tmp/rclone.conf
          fi

      - name: upload db
        run: |
          killall 1
          rclone sync /home/runner/work/ljer/ljer/fafda.db db:

